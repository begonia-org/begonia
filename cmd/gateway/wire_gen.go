// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/sirupsen/logrus"
	"github.com/spark-lence/tiga"
	"github.com/wetrycode/begonia/internal/biz"
	"github.com/wetrycode/begonia/internal/data"
	"github.com/wetrycode/begonia/internal/pkg/config"
	"github.com/wetrycode/begonia/internal/pkg/crypto"
	"github.com/wetrycode/begonia/internal/pkg/middleware"
	"github.com/wetrycode/begonia/internal/server"
	"github.com/wetrycode/begonia/internal/service"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func initApp(config2 *tiga.Configuration, log *logrus.Logger, endpoint string) *server.GatewayServer {
	configConfig := config.NewConfig(config2)
	serveMux := server.NewGatewayMux(configConfig)
	redisDao := tiga.NewRedisDao(config2)
	mySQLDao := tiga.NewMySQLDao(config2)
	dataData := data.NewData(mySQLDao, redisDao)
	localCache := data.NewLocalCache(dataData, configConfig, log)
	usersRepo := data.NewUserRepo(dataData, log, localCache)
	apiVildator := middleware.NewAPIVildator(redisDao, log, usersRepo, configConfig)
	v := server.NewGrpcServerOptions()
	grpcServer := grpc.NewServer(v...)
	handler := server.NewHandlers(configConfig, apiVildator, grpcServer, serveMux)
	usersAuth := crypto.NewUsersAuth()
	usersUsecase := biz.NewUsersUsecase(usersRepo, log, usersAuth, configConfig)
	usersService := service.NewUserService(usersUsecase, log, usersAuth, configConfig)
	fileRepo := data.NewFileRepoImpl(dataData)
	fileUsecase := biz.NewFileUsecase(fileRepo, configConfig)
	fileService := service.NewFileService(fileUsecase, configConfig)
	v2 := server.NewDialOptions()
	v3 := server.NewServiceOptions(usersService, fileService, endpoint, v2)
	gatewayServer := server.New(serveMux, handler, grpcServer, endpoint, v3)
	return gatewayServer
}
