// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/begonia-org/begonia/internal/biz"
	"github.com/begonia-org/begonia/internal/data"
	"github.com/begonia-org/begonia/internal/pkg/config"
	"github.com/begonia-org/begonia/internal/pkg/crypto"
	"github.com/begonia-org/begonia/internal/pkg/middleware"
	"github.com/begonia-org/begonia/internal/pkg/migrate"
	"github.com/begonia-org/begonia/internal/server"
	"github.com/begonia-org/begonia/internal/service"
	"github.com/begonia-org/dynamic-proto"
	"github.com/sirupsen/logrus"
	"github.com/spark-lence/tiga"
)

// Injectors from wire.go:

func initApp(config2 *tiga.Configuration, log *logrus.Logger, endpoint string) *dynamicproto.GatewayServer {
	gatewayConfig := server.NewGatewayConfig(endpoint)
	configConfig := config.NewConfig(config2)
	mySQLDao := tiga.NewMySQLDao(config2)
	redisDao := tiga.NewRedisDao(config2)
	dataData := data.NewData(mySQLDao, redisDao)
	fileRepo := data.NewFileRepoImpl(dataData)
	fileUsecase := biz.NewFileUsecase(fileRepo, configConfig)
	fileService := service.NewFileService(fileUsecase, configConfig)
	localCache := data.NewLocalCache(dataData, configConfig, log)
	usersRepo := data.NewUserRepo(dataData, log, localCache)
	usersAuth := crypto.NewUsersAuth()
	usersUsecase := biz.NewUsersUsecase(usersRepo, log, usersAuth, configConfig)
	usersService := service.NewUserService(usersUsecase, log, usersAuth, configConfig)
	endpointRepo := data.NewEndpointRepoImpl(dataData)
	endpointUsecase := biz.NewEndpointUsecase(endpointRepo)
	endpointsService := service.NewEndpointsService(endpointUsecase, log, configConfig)
	v := service.NewServices(fileService, usersService, endpointsService)
	apiValidator := middleware.NewAPIValidator(redisDao, log, usersRepo, configConfig, mySQLDao, localCache)
	gatewayServer := server.New(gatewayConfig, configConfig, v, apiValidator)
	return gatewayServer
}

func initOperatorApp(config2 *tiga.Configuration) *migrate.InitOperator {
	mySQLDao := tiga.NewMySQLDao(config2)
	v := migrate.NewTableModels()
	mySQLMigrate := migrate.NewMySQLMigrate(mySQLDao, v...)
	usersOperator := migrate.NewUsersOperator(mySQLDao)
	configConfig := config.NewConfig(config2)
	initOperator := migrate.NewInitOperator(mySQLMigrate, usersOperator, configConfig)
	return initOperator
}
