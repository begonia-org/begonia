// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package data

import (
	"github.com/begonia-org/begonia/internal/biz"
	"github.com/begonia-org/begonia/internal/biz/gateway"
	"github.com/begonia-org/begonia/internal/pkg/config"
	"github.com/begonia-org/go-sdk/logger"
	"github.com/spark-lence/tiga"
)

// Injectors from wire.go:

func NewAppRepo(cfg *tiga.Configuration, log logger.Logger) biz.AppRepo {
	mySQLDao := NewMySQL(cfg)
	redisDao := NewRDB(cfg)
	etcdDao := NewEtcd(cfg)
	data := NewData(mySQLDao, redisDao, etcdDao)
	configConfig := config.NewConfig(cfg)
	curd := NewCurdImpl(mySQLDao, configConfig)
	layeredCache := NewLayeredCache(data, configConfig, log)
	appRepo := NewAppRepoImpl(data, curd, layeredCache, configConfig)
	return appRepo
}

//	func NewFileRepo(cfg *tiga.Configuration,log logger.Logger) file.FileRepo {
//		panic(wire.Build(ProviderSet))
//	}
func NewEndpointRepo(cfg *tiga.Configuration, log logger.Logger) gateway.EndpointRepo {
	mySQLDao := NewMySQL(cfg)
	redisDao := NewRDB(cfg)
	etcdDao := NewEtcd(cfg)
	data := NewData(mySQLDao, redisDao, etcdDao)
	configConfig := config.NewConfig(cfg)
	endpointRepo := NewEndpointRepoImpl(data, configConfig)
	return endpointRepo
}

func NewAuthzRepo(cfg *tiga.Configuration, log logger.Logger) biz.AuthzRepo {
	mySQLDao := NewMySQL(cfg)
	redisDao := NewRDB(cfg)
	etcdDao := NewEtcd(cfg)
	data := NewData(mySQLDao, redisDao, etcdDao)
	configConfig := config.NewConfig(cfg)
	layeredCache := NewLayeredCache(data, configConfig, log)
	bizAuthzRepo := NewAuthzRepoImpl(data, log, layeredCache)
	return bizAuthzRepo
}

func NewUserRepo(cfg *tiga.Configuration, log logger.Logger) biz.UserRepo {
	mySQLDao := NewMySQL(cfg)
	redisDao := NewRDB(cfg)
	etcdDao := NewEtcd(cfg)
	data := NewData(mySQLDao, redisDao, etcdDao)
	configConfig := config.NewConfig(cfg)
	layeredCache := NewLayeredCache(data, configConfig, log)
	curd := NewCurdImpl(mySQLDao, configConfig)
	userRepo := NewUserRepoImpl(data, layeredCache, curd, configConfig)
	return userRepo
}

func NewLayered(cfg *tiga.Configuration, log logger.Logger) *LayeredCache {
	mySQLDao := NewMySQL(cfg)
	redisDao := NewRDB(cfg)
	etcdDao := NewEtcd(cfg)
	data := NewData(mySQLDao, redisDao, etcdDao)
	configConfig := config.NewConfig(cfg)
	layeredCache := NewLayeredCache(data, configConfig, log)
	return layeredCache
}

func NewOperator(cfg *tiga.Configuration, log logger.Logger) *LayeredCache {
	mySQLDao := NewMySQL(cfg)
	redisDao := NewRDB(cfg)
	etcdDao := NewEtcd(cfg)
	data := NewData(mySQLDao, redisDao, etcdDao)
	configConfig := config.NewConfig(cfg)
	layeredCache := NewLayeredCache(data, configConfig, log)
	return layeredCache
}
