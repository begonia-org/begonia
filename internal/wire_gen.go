// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/begonia-org/begonia/internal/biz"
	"github.com/begonia-org/begonia/internal/biz/endpoint"
	"github.com/begonia-org/begonia/internal/biz/file"
	"github.com/begonia-org/begonia/internal/daemon"
	"github.com/begonia-org/begonia/internal/data"
	"github.com/begonia-org/begonia/internal/pkg/config"
	"github.com/begonia-org/begonia/internal/pkg/crypto"
	"github.com/begonia-org/begonia/internal/pkg/middleware"
	"github.com/begonia-org/begonia/internal/pkg/migrate"
	"github.com/begonia-org/begonia/internal/server"
	"github.com/begonia-org/begonia/internal/service"
	"github.com/begonia-org/go-sdk/logger"
	"github.com/spark-lence/tiga"
)

// Injectors from wire.go:

func InitOperatorApp(config2 *tiga.Configuration) *migrate.InitOperator {
	mySQLDao := data.NewMySQL(config2)
	v := migrate.NewTableModels()
	mySQLMigrate := migrate.NewMySQLMigrate(mySQLDao, v...)
	usersOperator := migrate.NewUsersOperator(mySQLDao)
	appOperator := migrate.NewAPPOperator(mySQLDao)
	configConfig := config.NewConfig(config2)
	initOperator := migrate.NewInitOperator(mySQLMigrate, usersOperator, appOperator, configConfig)
	return initOperator
}

func New(config2 *tiga.Configuration, log logger.Logger, endpoint2 string) GatewayWorker {
	configConfig := config.NewConfig(config2)
	mySQLDao := data.NewMySQL(config2)
	redisDao := data.NewRDB(config2)
	etcdDao := data.NewEtcd(config2)
	dataData := data.NewData(mySQLDao, redisDao, etcdDao)
	curd := data.NewCurdImpl(mySQLDao, configConfig)
	layeredCache := data.NewLayeredCache(redisDao, configConfig, log)
	appRepo := data.NewAppRepoImpl(curd, layeredCache, configConfig)
	userRepo := data.NewUserRepoImpl(dataData, layeredCache, curd, configConfig)
	authzRepo := data.NewAuthzRepoImpl(log, layeredCache)
	dataOperatorRepo := data.NewDataOperatorRepo(dataData, appRepo, userRepo, authzRepo, layeredCache, log)
	endpointRepo := data.NewEndpointRepoImpl(dataData, configConfig)
	endpointWatcher := endpoint.NewWatcher(configConfig, endpointRepo)
	dataOperatorUsecase := biz.NewDataOperatorUsecase(dataOperatorRepo, configConfig, log, endpointWatcher, endpointRepo)
	daemonDaemon := daemon.NewDaemonImpl(configConfig, dataOperatorUsecase)
	gatewayConfig := server.NewGatewayConfig(endpoint2)
	fileUsecase := file.NewFileUsecase(configConfig)
	fileServiceServer := service.NewFileService(fileUsecase, configConfig)
	usersAuth := crypto.NewUsersAuth()
	authzUsecase := biz.NewAuthzUsecase(authzRepo, userRepo, log, usersAuth, configConfig)
	authServiceServer := service.NewAuthzService(authzUsecase, log, usersAuth, configConfig)
	endpointUsecase := endpoint.NewEndpointUsecase(endpointRepo, fileUsecase, configConfig)
	endpointServiceServer := service.NewEndpointsService(endpointUsecase, log, configConfig)
	appUsecase := biz.NewAppUsecase(appRepo, configConfig)
	appsServiceServer := service.NewAppService(appUsecase, log, configConfig)
	systemServiceServer := service.NewSysService()
	userUsecase := biz.NewUserUsecase(userRepo, configConfig)
	userServiceServer := service.NewUserService(userUsecase, log, configConfig)
	v := service.NewServices(fileServiceServer, authServiceServer, endpointServiceServer, appsServiceServer, systemServiceServer, userServiceServer)
	accessKeyAuth := biz.NewAccessKeyAuth(appRepo, configConfig, log)
	pluginsApply := middleware.New(configConfig, redisDao, authzUsecase, log, accessKeyAuth, layeredCache)
	gatewayServer := server.NewGateway(gatewayConfig, configConfig, v, pluginsApply)
	gatewayWorker := NewGatewayWorkerImpl(daemonDaemon, gatewayServer)
	return gatewayWorker
}
