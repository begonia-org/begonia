// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"context"
	"github.com/begonia-org/begonia/internal/biz"
	"github.com/begonia-org/begonia/internal/biz/file"
	"github.com/begonia-org/begonia/internal/biz/gateway"
	"github.com/begonia-org/begonia/internal/data"
	"github.com/begonia-org/begonia/internal/pkg/config"
	"github.com/begonia-org/begonia/internal/pkg/crypto"
	"github.com/begonia-org/begonia/internal/pkg/middleware"
	"github.com/begonia-org/begonia/internal/service"
	"github.com/begonia-org/dynamic-proto"
	"github.com/sirupsen/logrus"
	"github.com/spark-lence/tiga"
)

// Injectors from wire.go:

func New(config2 *tiga.Configuration, log *logrus.Logger, endpoint string) *dynamicproto.GatewayServer {
	gatewayConfig := NewGatewayConfig(endpoint)
	configConfig := config.NewConfig(config2)
	mySQLDao := data.NewMySQL(config2)
	redisDao := data.NewRDB(config2)
	etcdDao := data.NewEtcd(config2)
	dataData := data.NewData(mySQLDao, redisDao, etcdDao)
	fileRepo := data.NewFileRepoImpl(dataData)
	fileUsecase := file.NewFileUsecase(fileRepo, configConfig)
	fileService := service.NewFileService(fileUsecase, configConfig)
	contextContext := context.Background()
	layeredCache := data.NewLayeredCache(contextContext, dataData, configConfig, log)
	usersRepo := data.NewUserRepo(dataData, log, layeredCache)
	usersAuth := crypto.NewUsersAuth()
	usersUsecase := biz.NewUsersUsecase(usersRepo, log, usersAuth, configConfig)
	usersService := service.NewUserService(usersUsecase, log, usersAuth, configConfig)
	endpointRepo := data.NewEndpointRepoImpl(dataData)
	endpointUsecase := gateway.NewEndpointUsecase(endpointRepo, fileUsecase, configConfig)
	endpointsService := service.NewEndpointsService(endpointUsecase, log, configConfig)
	appRepo := data.NewAppRepoImpl(dataData, layeredCache)
	appUsecase := biz.NewAppUsecase(appRepo, configConfig)
	appService := service.NewAppService(appUsecase, log, configConfig)
	sysService := service.NewSysService()
	v := service.NewServices(fileService, usersService, endpointsService, appService, sysService)
	pluginsApply := middleware.New(configConfig, redisDao, usersUsecase, log, appRepo, layeredCache)
	gatewayServer := NewGateway(gatewayConfig, configConfig, v, pluginsApply)
	return gatewayServer
}
