syntax = "proto3";
package begonia-org.begonia;
option go_package = "github.com/begonia-org/begonia/api/v1";
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "common/web.proto";
import "user.proto";
message LoginAPIRequest{
  string auth=1;
  int64 seed=2;
  bool is_keep_login=3 [json_name="is_keep_login"];
}

message LogoutAPIRequest{
}
message LogoutAPIResponse{

  }
message LoginAPIResponse{
	Users user=1;
	string token=2;
}
message AccountAPIRequest{
	repeated string uids=1;
}
message AccountAPIResponse{
	repeated Users users=1;
}
message UserAuth{
  string account=1 [json_name="account"];
  string password=2 [json_name="password"];
}
message RegsiterAPIRequest{
	// string username=1;
	// string password=2;
  string auth=1;
	map<string, string> ext = 3 [json_name="ext"];

}
message AuthLogAPIRequest{
	string timestamp=1;
}
message AuthSeed{
	int64 seed=1;
	string key=2;

}
// 加密种子
message AuthLogAPIResponse{
	string msg=1;
	string timestamp=3;
}
service AuthService{
rpc login (LoginAPIRequest) returns (begonia-org.begonia.common.api.v1.APIResponse) {
	option (google.api.http) = {
   post: "/api/v1/auth/login"
   body: "*"
 };
 
 }
 rpc logout (LogoutAPIRequest) returns (begonia-org.begonia.common.api.v1.APIResponse) {
	option (google.api.http) = {
   get: "/api/v1/auth/logout"
 };
 }
 rpc account (AccountAPIRequest) returns (begonia-org.begonia.common.api.v1.APIResponse) {
	option (google.api.http) = {
		post: "/api/v1/auth/account"
		body: "*"
 };
 
 }
 rpc authSeed (AuthLogAPIRequest) returns (begonia-org.begonia.common.api.v1.APIResponse) {
	option (google.api.http) = {
   post: "/api/v1/auth/log"
   body: "*"
 };
 }
 rpc regsiter(RegsiterAPIRequest)returns(begonia-org.begonia.common.api.v1.APIResponse){
	option (google.api.http)={
		post:"/api/v1/auth/regsiter"
		body:"*"
	};
 }
}
